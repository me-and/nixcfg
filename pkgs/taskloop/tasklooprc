# This bashrc file is intended to provide a more-or-less normal Bash shell, except that it cooperates with the taskloop command that called it.
#
# Notably, it:
# - Creates a flag file as soon as the user tries to do anything, so the parent
#   process doesn't kill this Bash session if the user is in the middle of
#   doing anything.
# - Exits after running a successful command, so the parent process can redraw
#   the task table.

if [[ "$debug" ]]; then
	exec {BASH_XTRACEFD}>"$tmpdir"/innertrace."$n"
	set -x
fi

# Load regular bashrc commands, so the user has access to their normal
# shortcuts etc.
#
# TODO: Consider whether this needs to handle users with other profile files.
if [[ -r ~/.bashrc ]]; then
	. ~/.bashrc
fi

# Catch SIGTERM and exit; by default Bash will ignore SIGTERM in interactive
# sessions, but we need it to kill the session so the parent process can
# restart the session.
trap -- 'builtin exit' SIGTERM
: > "$sigterm_set_flag_file"

# Detect when the window changes size, and exit so the table can be redrawn for
# the current window size.  Ideally this would check for the existence of
# $bash_in_use_flag_file, but that file is created when the signal processing
# starts, and I haven't found any way to avoid that while still getting the
# file created before processes run.
trap -- 'builtin exit' SIGWINCH

# On exit, remove any flag indicating that the user is in the middle of doing
# things.
trap -- 'rm -f "$bash_in_use_flag_file"' EXIT

# On a successful command run, exit so the table can be redrawn.
first_prompt=Yes
process_prompt () {
	if [[ "$first_prompt" ]]; then
		first_prompt=
	elif [[ "$GIT_PROMPT_LAST_COMMAND_STATE" = 0 ]]; then
		builtin exit 0
	fi
}

# Rewrite the exit command so that if it's called explicitly it creates a flag
# file to indicate to the parent taskloop process that it should exit too.
#
# TODO Would this be better sending SIGTERM to $PPID?
exit () {
	: >"$explicit_exit_flag_file"
	builtin exit "$@"
}

m=0

PROMPT_COMMAND=(
	# Use the Bash Git Prompt commands for the actual prompt creation, in
	# particular including showing the return code and setting the return
	# code in GIT_PROMPT_LAST_COMMAND_STATE.
	setLastCommandState
	setGitPrompt

	# Call the process_prompt function to exit on success.
	process_prompt

	# Set a DEBUG trap to record that the user is doing something as the
	# very last thing before displaying the prompt: we want the trap to
	# fire as soon as the user tries something, but not before, and a DEBUG
	# trap will fire as soon as the next command is run whether by user
	# action or as part of PROMPT_COMMAND processing.
	'trap -- '\'': >"$bash_in_use_flag_file"; { declare -p; caller; } >"$tmpdir"/debug."$n"."$m"; m="$((m+1))"'\'' DEBUG'
)

# Set the Bash prompt, based broadly on my normal Bash prompt.
#
# TODO Make this play more nicely with the Bash Git Prompt, rather than vaguely
# importing bits of the prompt including my own custom nonsense.  Or possibly
# remove the dependency on Bash Git Prompt entirely, for the sake of having
# taskloop be usable by folk who don't use Bash Git Prompt.
ResetColor='\[\033[0;0m\]'
Red='\[\033[31m\]'
GIT_PROMPT_DISABLE=1
if [[ "$OSTYPE" = cygwin ]]; then
	if [[ " $(id -G) " = *' 544 '* ]]; then
		PROMPT_END="$TIME_COLOUR"'\D{%a %e %b %R}'" ${Red}#$ResetColor "
	else
		PROMPT_END="$TIME_COLOUR"'\D{%a %e %b %R}'"$ResetColor "'$ '
	fi
elif [[ "$UID" = 0 ]]; then
	PROMPT_END="$TIME_COLOUR"'\D{%a %e %b %R}'" $Red"'\$'"$ResetColor "
else
	PROMPT_END="$TIME_COLOUR"'\D{%a %e %b %R}'"$ResetColor"' \$ '
fi
PROMPT_START="_LAST_COMMAND_INDICATOR_ $HOST_COLOUR"'\u@\h '"$ResetColor"

# vim: ft=bash noet ts=8
