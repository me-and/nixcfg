# shellcheck disable=SC2034 # Referenced indirectly
expiration_days=365
cert_path=ca.cert.pem
key_path=ca.key.pem

_help () {
    cat <<EOF
$0 [-d <days>] [-a <cacert>] [-k <cakey>]

-h: Show this help message
-d: Set the certificate expiry time in days from now, e.g. \`-d 28\`.  Defaults
    to 365.
-a: Path to the CA certificate that will sign this certificate.  Defaults to
    ./ca.cert.pem.
-k: Path to the CA certificate key that will sign this certificate.  Defaults
    to ./ca.key.pem.
EOF
}

while getopts ':d:a:k:h' opt; do
    # shellcheck disable=SC2034 # Referenced indirectly
    case "$opt" in
    d)  expiration_days="$OPTARG";;
    a)  cert_path="$OPTARG";;
    k)  key_path="$OPTARG";;
    h)  _help
        exit 0
        ;;
    *)  printf -- '-%s is not a valid option!\n\n' "$OPTARG" >&2
        _help >&2
        exit 64 # EX_USAGE
        ;;
    esac
done

certinfo="$(openssl x509 -in "$cert_path" -noout -subject)"
[[ "$certinfo" =~ 'subject=C = '(.*)', O = '(.*)', CN = '(.*) ]]
country="${BASH_REMATCH[1]}"
organization="${BASH_REMATCH[2]}"
cn="${BASH_REMATCH[3]}"

template () {
    cat <<EOF
organization = $organization
cn = $cn
country = $country
expiration_days = $expiration_days
ca
EOF
}

umask 022
certtool \
    --update-certificate \
    --infile "$cert_path" \
    --generate-self-signed \
    --load-privkey "$key_path" \
    --template <(template || :) \
    >new-ca.cert.pem

cat <<EOF
Self-signed CA certificate created successfully. Now you need to copy
new-ca.cert.pem to wherever Taskserver is expecting to find it, and make sure
the Taskserver daemon has permission to read it.
EOF

# vim: ft=bash et ts=4
