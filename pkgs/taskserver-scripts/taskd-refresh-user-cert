# shellcheck disable=SC2034 # Referenced indirectly
set -x
expiration_days=365
ca_cert_path=ca.cert.pem
ca_key_path=ca.key.pem

_help () {
    cat <<EOF
$0 [-d <days>] [-a <cacert>] [-k <cakey>] <name>

<name>: The username for this certificate.

-h: Show this help message
-d: Set the certificate expiry time in days from now, e.g. \`-d 28\`.  Defaults
    to 365.
-a: Path to the CA certificate that will sign this certificate.  Defaults to
    ./ca.cert.pem.
-k: Path to the CA certificate key that will sign this certificate.  Defaults
    to ./ca.key.pem.
EOF
}

while getopts ':d:a:k:h' opt; do
    # shellcheck disable=SC2034 # Referenced indirectly
    case "$opt" in
    d)  expiration_days="$OPTARG";;
    a)  cert_path="$OPTARG";;
    k)  key_path="$OPTARG";;
    h)  _help
        exit 0
        ;;
    *)  printf -- '-%s is not a valid option!\n\n' "$OPTARG" >&2
        _help >&2
        exit 64 # EX_USAGE
        ;;
    esac
done

shift "$((OPTIND-1))"
if (( $# != 1 )); then
    echo "Unexpected number of non-option arguments: $#" >&2
    echo
    _help >&2
    exit 64 # EX_USAGE
fi

name="$1"
usercert="${name}.cert.pem"
userkey="${name}.key.pem"

certinfo="$(openssl x509 -in "$usercert" -noout -subject)"
[[ "$certinfo" =~ 'subject=C = '(.*)', CN = '(.*) ]]
country="${BASH_REMATCH[1]}"
cn="${BASH_REMATCH[2]}"

template () {
    cat <<EOF
cn = $cn
country = $country
expiration_days = $expiration_days
tls_www_client
encryption_key
signing_key
EOF
}

umask 022
certtool \
    --update-certificate \
    --infile "$usercert" \
    --generate-certificate \
    --load-ca-certificate "$ca_cert_path" \
    --load-ca-privkey "$ca_key_path" \
    --load-privkey "$userkey" \
    --template <(template || :) \
    >new-"$usercert"

cat <<EOF
Self-signed CA certificate created successfully. Now you need to copy
new-$usercert to wherever Taskwarrior is expecting to find it.
EOF

# vim: ft=bash et ts=4
