[[ "$OSTYPE" = 'cygwin' ]] || return 0

CYGWIN_BASE_DOWNLOAD_URL='https://www.cygwin.com/'
CYGWIN_MIRROR_URL='https://www.mirrorservice.org/sites/sourceware.org/pub/cygwin/'
CYGWIN_DOWNLOAD_DIR=~/WinHome/Downloads

cygwin_setup_executable=
case "$HOSTTYPE" in
	x86_64) cygwin_setup_executable=setup-x86_64.exe
			cygwin_setup_ini_path="$CYGWIN_DOWNLOAD_DIR/$(sed 's/:/%3a/g;s!/!%2f!g' <<<"$CYGWIN_MIRROR_URL")/x86_64/setup.ini"
			;;
	i686)   cygwin_setup_executable=setup-x86.exe
			cygwin_setup_ini_path="$CYGWIN_DOWNLOAD_DIR/$(sed 's/:/%3a/g;s!/!%2f!g' <<<"$CYGWIN_MIRROR_URL")/x86/setup.ini"
			;;
esac

if [[ -n "$cygwin_setup_executable" ]]; then
	cygwin_setup_path=
	for path in /bin/"$cygwin_setup_executable" \
		/usr/bin/"$cygwin_setup_executable" \
		/usr/local/bin/"$cygwin_setup_executable" \
		"$CYGWIN_DOWNLOAD_DIR"/"$cygwin_setup_executable"
	do
		if [[ -f "$path" && -x "$path" ]]; then
			cygwin_setup_path="$path"
			break
		fi
	done
	unset path

	if [[ -z "$cygwin_setup_path" ]]; then
		cygwin_setup_path=/usr/local/bin/"$cygwin_setup_executable"
	fi

	function cygwin_setup_update {
		if [[ -e "$cygwin_setup_path" ]]; then
			# File exists so we can test if the upstream version is newer.
			curl -o "$cygwin_setup_path" -z "$cygwin_setup_path" \
				"${CYGWIN_BASE_DOWNLOAD_URL}${cygwin_setup_executable}"
		else
			curl -o "$cygwin_setup_path" \
				"${CYGWIN_BASE_DOWNLOAD_URL}${cygwin_setup_executable}"
		fi &&
		chmod +x "$cygwin_setup_path"
	}

	function cygwin_setup_run {
		cygstart "$cygwin_setup_path" -d -l "$(cygpath -aw "$CYGWIN_DOWNLOAD_DIR")" -s "$CYGWIN_MIRROR_URL" "$@" -R "$(cygpath -aw /)"
	}

	function cygwin_setup {
		if [[ "$1" = '-h' || "$1" = '--help' ]]; then
			# Don't bother with the overhead of updating the installer unless
			# it's not available at all.
			[[ -e "$cygwin_setup_path" ]] || cygwin_setup_update &&
			"$cygwin_setup_path" --help
			return $?
		fi
		# Try and update the installer if the setup.ini file is more than a few
		# hours old.  If the file is fresher than that, I'm probably running a
		# bunch of installer commands in quick succession, and I don't want to
		# check the download every time!
		(( "$(file-age -f -- "$cygwin_setup_ini_path")" < (60*60*4) )) || cygwin_setup_update || return $?
		cygwin_setup_run "$@"
	}

	if [[ ! -v TASKLOOP ]]; then
		if [[ ! -r /var/log/setup.log ]]; then
			wrap_message <<<"Couldn't find /var/log/setup.log to check age" >&2
		elif (( $(file-age -- /var/log/setup.log) >= (60*60*24*7) )); then
			wrap_message <<<"Cygwin setup hasn't been run for $(file-age -h -- /var/log/setup.log)" >&2
		fi
	fi
else
	wrap_message <<-'EOM' >&2
		Unrecognised host architecture!
		Unable to configure Cygwin setup functions.
		EOM
fi

function cygwin_list_packages {
	cygcheck -cd | tail -n +3 | sed 's/ .*$//'
}

function cygwin_list_leaves {
	if ! command -v cygcheck-dep >/dev/null; then
		wrap_message <<<"cygcheck-dep not available" >&2
		return 1
	fi
	cygcheck-dep -cl 2>/dev/null | grep -vF '[Base]' | sed 's/^ *//'
}

function cygwin_whatprovides {
	# This is a BRE, and if I'm looking for what provides the file 'vim', I'm
	# actually interested in what provides any of (a) /vim, (b) /vim.exe or (c)
	# /vim -> vim8.2 (which is how symlinks get stored).
	cygcheck -p '\/'"$1"'\( -> \|$\|\.exe\)'
}

function cygwin_setup_clean {
	find "$CYGWIN_DOWNLOAD_DIR"/http*%3a%2f%2f* -type f -printf '%h\0' |
		sort -z | uniq -zd |
		xargs -r0 bash -exuo pipefail -c '
			for d; do
				files=()
				for f in "$d"/*; do
					if [[ -f "$f" ]]; then
						files+=("$f")
					fi
				done
				if (( "${#files[*]}" < 2 )); then
					continue
				fi
				newest="${files[0]}"
				for f in "${files[@]:1}"; do
					if [[ "$f" -nt "$newest" ]]; then
						rm -v "$newest"
						newest="$f"
					else
						rm -v "$f"
					fi
				done
			done' -
}

# vim: ft=bash noet ts=4
