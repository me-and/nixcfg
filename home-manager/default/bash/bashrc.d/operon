_operon_find_args=( -type f \( -name '*.mp3' -o -name '*.m4a' -o -name '*.ogg' -o -name '*.opus' -o -name '*.flac' -o -name '*.wav' \) )

_operons_act () {
	local page=
	local opt OPTIND=1 OPTARG
	while getopts :l opt; do
		case "$opt" in
			l)	page=YesPlease;;
			*)	echo "Unexected option to _operons_act: -$OPTARG" >&2
				return 70  # EX_SOFTWARE
				;;
		esac
	done
	shift "$(( OPTIND - 1 ))"
	local -n _commands="$1"
	shift
	if (( $# > 0 )); then
		local paths=("$@")
	else
		local paths=(.)
	fi
	local full_cmd=(find "${paths[@]}" "${_operon_find_args[@]}" "${_commands[@]}")
	if [[ "$page" && -t 0 ]]; then
		"${full_cmd[@]}" | less -R
	else
		"${full_cmd[@]}"
	fi
}

operons_list () {
	if [[ -t 0 ]]; then
		_operons_list_unpaged "$@" | less -R
	else
		_operons_list_unpaged "$@"
	fi
}

_operons_list_unpaged () {
	local short_arg=
	local opt OPTIND=1 OPTARG
	while getopts :s opt; do
		case "$opt" in
			s)	short_arg=-tctag,value;;
			*)	echo "Unexpected option to operons_list: -$OPTARG" >&2
				return 64  # EX_USAGE, since this is a user-passed arg
				;;
		esac
	done
	shift "$(( OPTIND - 1 ))"
	local commands=(-print0)
	while read -rd '' f; do
		printf '%s\n' "$f"
		operon list -a ${short_arg} "$f"
		echo
	done < <(_operons_act commands "$@" | sort -z)
}

operons_onetag () {
	local escape= file_name=
	local opt OPTIND=1 OPTARG
	while getopts :en opt; do
		case "$opt" in
			e)	escape=YesPlease;;
			n)	file_name=YesPlease;;
			*)	echo "Unexpected option: -$OPTARG" >&2
				return 64  # EX_USAGE
				;;
		esac
	done
	shift "$(( OPTIND - 1 ))"
	local tag="$1"
	shift
	if [[ "$file_name" && "$escape" ]]; then
		local commands=(-print0)
		while read -r -d '' f; do
			printf '%q: %q\n' "$f" "$(operon print -p "<${tag}>" "$f")"
		done < <(_operons_act commands "$@")
	else
		if [[ "$file_name" ]]; then
			local commands=(-exec operon print -p "<~filename>: <${tag}>" {} +)
		else
			local commands=(-exec operon print -p "<${tag}>" {} +)
		fi
		_operons_act commands "$@"
	fi
}

operons_clear () {
	local tag="$1"
	shift
	local commands=(-exec operon clear "$tag" {} +)
	_operons_act commands "$@"
}

operons_store () {
	local -n target="$1"
	shift
	target=()
	local commands=(-print0)
	while read -rd '' f; do
		target+=("$f")
	done < <(_operons_act commands "$@")
}

operons_tags () {
	local commands=(-execdir operon list -tactag {} \;)
	_operons_act commands "$@" | sort -u
}

operons_set () {
	local tag="$1"
	local value="$2"
	shift 2
	local commands=(-exec operon set "$tag" "$value" {} +)
	_operons_act commands "$@"
}

operons_append () {
	local tag="$1"
	local value="$2"
	shift 2
	local bash_command
	printf -v bash_command 'for f; do i="$(operon print -p \<%q\> "$f")" && operon set %q "$i"%q "$f"; done' "$tag" "$tag" "$value"
	local commands=(-exec bash -euo pipefail -c "$bash_command" - {} +)
	_operons_act commands "$@"
}

operons_count () {
	local commands=(-printf .)
	_operons_act commands "$@" | wc -c
}

operons () {
	command="$1"
	shift
	case "$command" in
		'')	echo 'No command specified' >&2
			return 64  # EX_USAGE
			;;
		list)	operons_list "$@";;
		onetag)	operons_onetag "$@";;
		clear)	operons_clear "$@";;
		store)	operons_store "$@";;
		tags)	operons_tags "$@";;
		set)	operons_set "$@";;
		append)	operons_append "$@";;
		count)	operons_count "$@";;
		*)	echo "Unrecognised command $command" >&2
			return 64  # EX_USAGE
			;;
	esac
}

# vim: ft=bash noet ts=8
