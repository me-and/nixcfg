name: Check package builds
on: workflow_dispatch
jobs:
  get-channels:
    name: Get channel list
    runs-on: ubuntu-latest
    outputs:
      channels: ${{ steps.channels.outputs.channels }}
    steps:
      - name: Work out channel list
        id: channels
        run: |
          delim="$(uuidgen)"
          exec >"$GITHUB_OUTPUT"
          printf 'channels<<%s\n' "$delim"
          curl 'https://prometheus.nixos.org/api/v1/query?query=channel_revision' |
              jq -c '.data.result
                     | map(
                         .metric
                         | select(.variant != "darwin")
                         | select(.status != "unmaintained")
                         | .channel
                     )
                     + [null]'
          printf '%s\n' "$delim"

  build-packages:
    name: Build packages
    needs:
      - get-channels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel: ${{ fromJSON(needs.get-channels.outputs.channels) }}
    env:
      NIXPKGS_ALLOW_UNFREE: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20
        with:
          extra-conf: sandbox = relaxed
      - name: Store Nix channel to use
        if: matrix.channel != null
        env:
          CHANNEL: ${{ matrix.channel }}
        run: |
          printf 'NIX_PATH=nixpkgs=channel:%s\n' "$CHANNEL" >>$GITHUB_ENV
      - name: Build packages
        run: |
          nix-instantiate \
                  --eval \
                  --json \
                  -E 'import ./lib/github-testable-packages.nix {}' |
              jq -r '.[]' >package-list.txt
          mapfile -t packages <package-list.txt
          package_args=()
          for p in "${packages[@]}"; do
              package_args+=(-A "$p")
          done

          nix-instantiate \
                  --eval \
                  --json \
                  -E '(import <nixpkgs> {}).lib.version' |
              jq -r '"Nixpkgs version: \(.)"' >&2

          nix-build pkgs "${package_args[@]}"
